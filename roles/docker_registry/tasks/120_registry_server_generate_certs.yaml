- name: Create temporary openssl configuration | Ubuntu
  command: "cp /etc/ssl/openssl.cnf {{ openssl_tmp_config }}"
  args:
    creates="{{ openssl_tmp_config }}"
  register: first_attempt
  ignore_errors: yes
  run_once: true
  delegate_to: localhost
  connection: local

- name: Create temporary openssl configuration | Centos
  command: "cp /etc/pki/tls/openssl.cnf {{ openssl_tmp_config }}"
  args: 
    creates="{{ openssl_tmp_config }}"
  when: first_attempt|failed
  run_once: true
  delegate_to: localhost
  connection: local


- name: Debug openssl configuration
  debug: var=openssl_tmp_config
  run_once: true
  delegate_to: localhost
  connection: local

- name: Update ssl configuration
  blockinfile:
    dest: "{{ openssl_tmp_config }}"
    block: |
      [ alternate_names ]
      DNS.1        = registry
  run_once: true
  delegate_to: localhost
  connection: local

- name: Update openssl settings - allow AltNames
  lineinfile: >
    dest="{{ openssl_tmp_config }}"
    insertafter="^\[ v3_ca \]"
    line="subjectAltName = @alternate_names"
  run_once: true
  delegate_to: localhost
  connection: local


- debug: var=playbook_dir
- debug: var=role_path

- name: Generate certs for registry TLS support
  shell: >
    openssl req -config {{ openssl_tmp_config }} -newkey rsa:{{ key_length }} -nodes -sha256
    -keyout {{ role_path }}/files/{{ key_name }}.key -x509 -days {{ valid_time }}
    -out {{ role_path }}/files/{{ key_name }}.crt
    -subj '/CN={{ container_address }}/O={{ company_name }}/C={{ company_country }}'
  args:
    creates: "{{ role_path }}/files/{{ key_name }}.crt"
  delegate_to: localhost
  connection: local


- name: Remove temporary openssl config
  file: path="{{ openssl_tmp_config }}" state=absent
  delegate_to: localhost
  connection: local
  run_once: true


- name: Copy Cert to Docker Registry Server
  copy:
    src: "files/{{ key_name }}.crt"
    dest: "/etc/docker/certs.d/{{ container_address }}/{{ key_name }}.crt"


- name: Copy Cert Key to Docker Registry Server
  copy:
    src: "files/{{ key_name }}.key"
    dest: "/etc/docker/certs.d/{{ container_address }}/{{ key_name }}.key"



- name: Copy Cert to Docker Registry Server to /etc
  copy:
    src: "files/{{ key_name }}.crt"
    dest: "{{ registry_certs_path }}/{{ key_name }}.crt"


- name: Copy Cert Key to Docker Registry Server to /etc
  copy:
    src: "files/{{ key_name }}.key"
    dest: "{{ registry_certs_path }}/{{ key_name }}.key"

- name: Create symlink /etc
  file:
    src: "{{ registry_certs_path }}/{{ key_name }}.crt"
    dest: "{{ registry_certs_path }}/{{ key_name }}.cert"
    state: link

- name: Create symlink
  file:
    src: "/etc/docker/certs.d/{{ container_address }}/{{ key_name }}.crt"
    dest: "/etc/docker/certs.d/{{ container_address }}/{{ key_name }}.cert"
    state: link

